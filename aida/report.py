import os.path
import os
import glob
import time
import numpy as np
from fpdf import FPDF
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import numpy as np
from mpl_toolkits.basemap import Basemap


def plotter(X, Y, Z, fname: str, title: str, unit: int, vmin, vmax):

    fig = plt.figure(figsize=(16, 8))
    ax = plt.axes()
    map = Basemap(projection='cyl', llcrnrlat=np.min(Y.flatten()), urcrnrlat=np.max(Y.flatten()),
                  llcrnrlon=np.min(X.flatten()), urcrnrlon=np.max(X.flatten()), resolution="i")
    levels = np.linspace(vmin, vmax, 1000)
    map.contourf(X, Y, Z, levels=levels, vmin=vmin, vmax=vmax,
                 cmap=mpl.colormaps['rainbow'], extend='both')
    map.drawcoastlines()
    map.drawcountries()
    x_ticks = np.arange(np.min(X.flatten()),
                        np.max(X.flatten()), 40)
    x_labels = np.linspace(np.min(X.flatten()), np.max(
        X.flatten()), np.size(x_ticks))
    ax.set_xticks(x_ticks)
    ax.set_xticklabels(x_labels, fontsize=18)
    ax.xaxis.set_major_formatter(FormatStrFormatter('%.1f'))
    y_ticks = np.arange(np.min(Y.flatten()), np.max(Y.flatten()), 20)
    y_labels = np.linspace(np.min(Y.flatten()), np.max(
        Y.flatten()), np.size(y_ticks))
    ax.set_yticks(y_ticks)
    ax.set_yticklabels(y_labels, fontsize=18)
    ax.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
    # plotting lat and lon
    plt.xlabel('Lon', fontsize=20)
    plt.ylabel('Lat', fontsize=20)
    cbar = plt.colorbar()
    cbar.ax.tick_params(labelsize=18)
    if unit == 1:
        cbar.set_label(r'$[ \times 10^{15}molec.cm^{-2}] $', fontsize=18)
    elif unit == 2:
        cbar.set_label('$ [Unitless] $', fontsize=18)
    elif unit == 3:
        cbar.set_label('$ [DU] $', fontsize=18)
    elif unit == 4:
        cbar.set_label(r'$[ \times 10^{18}molec.cm^{-2}] $', fontsize=18)
    elif unit == 5:
        cbar.set_label(r'$[ppmv] $', fontsize=18)
    elif unit == 5:
        cbar.set_label(r'$[ppmv] $', fontsize=18)
    elif unit == 6:
        cbar.set_label(r'$[g/s/km2] $', fontsize=18)
    plt.title(title, loc='left', fontweight='bold', fontsize=20)
    plt.tight_layout()
    fig.savefig(fname, format='png', dpi=300)
    plt.close()


def topdf(fname: str, folder: str, pdf_output: str):
    ''' 
    save all pngs to a pdf report
    '''
    def header(pdfobj, title, fsize=22):
        # Arial bold 15
        pdfobj.set_font('Arial', 'B', fsize)
        # Calculate width of title and position
        w = pdfobj.get_string_width(title) + 6
        pdfobj.set_x((210 - w) / 2)
        pdfobj.set_fill_color(255, 255, 255)
        pdfobj.set_text_color(0, 0, 0)
        # Thickness of frame (1 mm)
        pdfobj.set_line_width(1)
        # Title
        pdfobj.cell(w, 9, title, 1, 1, 'C', 1)
        # Line break
        pdfobj.ln(10)
        return w

    def body(pdfobj, bd1):
        # Times 12
        pdfobj.set_font('Times', '', 12)
        # Output justified text
        pdfobj.multi_cell(0, 5, bd1)
        # Line break
        pdfobj.ln(1)

    # call the fpdf obj
    pdf = FPDF(orientation="landscape")
    pdf.add_page()
    title = 'Automatic Report Generated By AIDA'
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(280, 100, txt=title, border=0, ln=1, align="C")
    pdf.cell(280, 20, txt='Amir H. Souri', border=0, ln=1, align="C")
    pdf.cell(280, 20, txt='Contact: ahsouri@gmail.com',
             border=0, ln=1, align="C")
    t = time.localtime()
    current_time = time.strftime("%Y-%m-%d %H:%M:%S", t)
    pdf.cell(280, 20, txt='Created at: ' +
             current_time, border=0, ln=1, align="C")

    # printing grayscales
    map_plots = sorted(glob.glob('temp/*' + fname + '*.png'))
    for fname in map_plots:
        pdf.add_page()
        pdf.image(fname, h=pdf.eph, w=pdf.epw+20)

    # writing
    if not os.path.exists(folder):
        os.makedirs(folder)

    pdf.output(folder + '/' + pdf_output, 'F')


def report(lon: np.ndarray, lat: np.ndarray, averaged_generic_fields,  oi_fields, inversion_fields, fname: str, ffolder: str, gasname: str, read_ddm = False):
    '''
    '''
    if not os.path.exists('temp'):
        os.makedirs('temp')    

    if gasname == 'HCHO':
        vmin_vcd = 0.0
        vmax_vcd = 20.0
        vmin_ratio = -1.5
        vmax_ratio = 1.5
        vmax_error = 15.0
        vmin_incre = -5.0
        vmax_incre = 5.0
        unit = 1
        aux = 'AMF'
    if gasname == 'NO2':
        vmin_vcd = 0.0
        vmax_vcd = 10.0
        vmin_ratio = -1.5
        vmax_ratio = 1.5
        vmax_error = 5.0
        vmin_incre = -5.0
        vmax_incre = 5.0
        unit = 1
        aux = 'AMF'
    if gasname == 'O3':
        vmin_vcd = 200.0
        vmax_vcd = 500.0
        vmin_ratio = -1.5
        vmax_ratio = 1.5
        vmax_error = 30.0
        vmin_incre = -20.0
        vmax_incre = 20.0
        unit = 3  # DU
    if gasname == 'CO':
        vmin_vcd = 0.0
        vmax_vcd = 3.0
        vmin_ratio = -1.5
        vmax_ratio = 1.5
        vmax_error = 0.2
        vmin_incre = -2.0
        vmax_incre = 2.0
        unit = 4
        aux = 'xcol'
        # scaling to match 1x10^18
        averaged_generic_fields.ctm_vcd = averaged_generic_fields.ctm_vcd*1e-3
        averaged_generic_fields.sat_vcd = averaged_generic_fields.sat_vcd*1e-3
        averaged_generic_fields.sat_err = averaged_generic_fields.sat_err*1e-3
        if oi_fields:
           oi_fields.increment = oi_fields.increment*1e-3
           oi_fields.error_analysis = oi_fields.error_analysis*1e-3
           oi_fields.ctm_corrected = oi_fields.ctm_corrected*1e-3
        unit_aux = 5
        vmin_aux = 0
        vmax_aux = 0.15
    
    
    # generic fields
    plotter(lon, lat, averaged_generic_fields.ctm_vcd, 'temp/ctm_vcd_before_' +
            fname + '.png', 'CTM VCD (prior)', unit, vmin_vcd, vmax_vcd)
    plotter(lon, lat, averaged_generic_fields.sat_vcd, 'temp/ctm_vcd_sat_used_' + fname +
            '.png', 'Satellite Observation (VCD)', unit, vmin_vcd, vmax_vcd)
    plotter(lon, lat, averaged_generic_fields.sat_err, 'temp/ctm_vcd_sat_zerr_' + fname +
            '.png', 'Satellite Error (VCD)', unit, 0.0, vmax_error)
    plotter(lon, lat, averaged_generic_fields.sys_err, 'temp/ctm_vcd_sys_err_' + fname +
            '.png', 'Satellite systematic Error (VCD)', unit, 0.0, vmax_error)
    if aux == "AMF":
        plotter(lon, lat, averaged_generic_fields.aux1, 'temp/aux1_' +
                fname + '.png', 'New AMF', 2, 0.0, 4)
        plotter(lon, lat, averaged_generic_fields.aux2, 'temp/aux2_' +
                fname + '.png', 'Old AMF', 2, 0.0, 4)
    if aux == "xcol":
        plotter(lon, lat, averaged_generic_fields.aux1, 'temp/aux1_' +
                fname + '.png', 'XCO (Sat)', unit_aux, vmin_aux, vmax_aux)
        plotter(lon, lat, averaged_generic_fields.aux2, 'temp/aux2_' +
                fname + '.png', 'XCO (CTM-Prior)', unit_aux, vmin_aux, vmax_aux)
    if read_ddm == True:
       plotter(lon, lat, averaged_generic_fields.ddm_vcd, 'temp/ddm_' +
            fname + '.png', 'DDM (col)', 1, vmin_vcd, vmax_vcd)
       plotter(lon, lat, averaged_generic_fields.emis_total, 'temp/emis_tot_' +
            fname + '.png', 'Emission (total)', 6, vmin_vcd, vmax_vcd/10.0)
       plotter(lon, lat, averaged_generic_fields.emis_error, 'temp/emis_err_' +
            fname + '.png', 'Emission error (total)', 6, vmin_vcd, vmax_vcd/10.0)

    # OI fields
    if oi_fields:
        plotter(lon, lat, oi_fields.ctm_corrected, 'temp/ctm_vcd_after_' +
            fname + '.png', 'CTM VCD (posterior)', unit, vmin_vcd, vmax_vcd)
        plotter(lon, lat, oi_fields.increment, 'temp/increment_' +
            fname + '.png', 'Increment (VCD)', unit, vmin_incre, vmax_incre)
        plotter(lon, lat, oi_fields.ak, 'temp/dak_' +
            fname + '.png', 'Averaging Kernels', 2, 0.0, 1.0)
        plotter(lon, lat, oi_fields.error_analysis, 'temp/error_' +
            fname + '.png', 'OI estimate error', unit, 0.0, vmax_error)             

    # Inversion fields
    if inversion_fields:
        vcd_ratio = averaged_generic_fields.sat_vcd/averaged_generic_fields.ctm_vcd
        plotter(lon, lat, vcd_ratio , 'temp/iv_ratio_vcd_' +
            fname + '.png', 'IV Ratio (sat_vcd/ctm_vcd)', 2, 0, vmax_ratio)
        plotter(lon, lat, inversion_fields.ratio, 'temp/iv_ratio_' +
            fname + '.png', 'IV Ratio (posterior/priori)', 2, 0, vmax_ratio)
        plotter(lon, lat, inversion_fields.increment, 'temp/iv_increment_' +
            fname + '.png', 'IV Increment (emission)', 6, vmin_vcd, vmax_vcd/20.0)
        plotter(lon, lat, inversion_fields.ak, 'temp/iv_ak_' +
            fname + '.png', 'IV Averaging Kernels', 2, 0.0, 1.0)
        plotter(lon, lat, inversion_fields.error_analysis, 'temp/iv_error_' +
            fname + '.png', 'IV estimate error', 6, vmin_vcd, vmax_vcd/10.0)

    topdf(fname, ffolder, 'AIDA_report_' + fname + '.pdf')
